@{
    ViewData["Title"] = "博客";
    Layout = "/views/shared/_Layout2.cshtml";
}

<div id="app" class="container-xxl  bd-layout">
    <aside class="bd-sidebar">
        <div style="background-color: #F5F5F5">
            <header class="header_base">
                <a href="#" class="link-underline-light" @@click.prevent="showTreeButBar()">编辑</a>
                <a href="#" class="link-underline-light" @@click.prevent="appendClass(vNode,vCurrentNode)">添加</a>

            </header>
        </div>
        <div id="treebox" class="custom-tree-container  bd-sidebarTree1" ref="divScroll" v-on:scorll="scroll">
            <div class="m-2 mb-5">


            实习生是非常苦逼的，最苦最累的任务都是他们的，而且，也还都没什么技术含量。

            这也是没办法的事情，毕竟他们还只是学习阶段。

            让时宇他们去做高难度的任务比如训练宠兽，他们也得有那个能力才行。

            就像刚才那样的狼群，如果没有一只会威慑技能的狼王，管理训练起来就非常不容易。

            把这群雪狼训练好，训练成适合御兽师饲养、契约的宠兽，是其他正式饲养训练员的事情了。

            时宇等实习生，也只能做做比较基础的工作。

            当然，除了比较基础的工作，正式饲养员们定期也会带领时宇他们这样的实习生进行其他工作，可以让实习生学到许多新东西。

            “实习期还有三个月，还是先踏踏实实学习吧。”

            前身一直想成为御兽师，也做了许多准备，宠兽饲养员这个职业就是他为自己准备的跳板。

            虽然收获了金手指，但是时宇考虑了一下，自己对御兽师的了解实在有限，靠记忆中那点知识根本无法放开浪，当下还是稳妥发育比较好。

            这个技能图鉴毫无疑问是为成为御兽师打造的，不当御兽师可惜了，可除了图鉴的教学能力，他目前就没有什么其他的成为御兽师的资本了。

            接下来，时宇决定还是先好好对待宠兽饲养员这份工作，趁着这个机会更多了解一下技能图鉴和这个世界，再做其他打算。

            而且，他从冰原市平城区铁竹饲养基地预定的宠兽幼崽，也需要他这次的实习证明才能领取呢。

            铁竹饲养基地考虑到时宇的偿还能力，现在他还没资格领取那只宠兽，但等他实习结束后，获得饲养员证书，就有那个贷款资格了。

            因此，对于时宇来说，这个实习还真马虎不得。

            如果时宇的规划全部顺利，成为御兽师应该没问题，不过之后，便是漫长的还贷生涯了，这个过程，成为御兽师有可能让时宇一飞冲天，也有可能把他拖垮……毕竟养宠兽是真的消耗资源。

            食铁兽！

            这就是时宇预定那只宠兽的名字。

            【名称】：食铁兽。

            【属性】：金

            【种族等级】：中等超凡。

            【种族技能】：硬化

            食铁兽……其实就是大熊猫。

        肯定是因为狼王留下了自己气味的缘故，狼王走后，面对时宇，这群普通雪狼表现的明显没之前那么凶了。

        正如其他实习生说的一样，很乖巧。

        这种乖巧，让时宇接下来喂食过程以及研究脑海中的图鉴过程顺利不少。

        “果然能教学。”给一只只雪狼分配好食物后，时宇心中兴奋。

        刚才，在视线中有一只只雪狼时，时宇脑海中的石质图鉴的第一页信息直接改变了。

        技能状态从暂无教学对象变成了可教学。

        也就是说，他的确可以将图鉴中的威慑技能，传授给刚才喂食过的每一只雪狼！

        真·手动生产狼王！

        当然，能归能，时宇很显然不会贸然使用这个教学能力。

        先不说不知道会消耗多少体能，另外，随意帮助饲养基地的雪狼学会威慑技能，肯定也会出大问题的……

        继续喂食——

        时宇全身心投入进去，很快，工作完成，不过让时宇可惜的是，喂食雪狼的过程中，他没能复制到雪狼们的其他技能。

        毕竟除了时刻展现威慑的狼王，其他雪狼根本不会闲的蛋疼在吃饭时候使用种族技能。

        没有就没有吧，时宇也不贪心，一个高阶精神系威慑技能，已经让他这次赚大了。

        ……

        接下来，忙完了雪狼群的喂食工作后，时宇又开始去做其他任务。

        饲养基地内，时宇看见了从天空掠过巡逻的青背鹰。

        视线与意念锁定下，虽然隔着挺远距离，但脑海图鉴中威慑技能的状态再次从暂无教学对象变成可教学状态。

        瞧瞧，不仅能培养出狼王……还能培养出鸟王！

        时宇真的想试一试。

        不过，理智让他选择了干活。

        实习生是非常苦逼的，最苦最累的任务都是他们的，而且，也还都没什么技术含量。

        这也是没办法的事情，毕竟他们还只是学习阶段。

        让时宇他们去做高难度的任务比如训练宠兽，他们也得有那个能力才行。

        就像刚才那样的狼群，如果没有一只会威慑技能的狼王，管理训练起来就非常不容易。

        把这群雪狼训练好，训练成适合御兽师饲养、契约的宠兽，是其他正式饲养训练员的事情了。

        时宇等实习生，也只能做做比较基础的工作。

        当然，除了比较基础的工作，正式饲养员们定期也会带领时宇他们这样的实习生进行其他工作，可以让实习生学到许多新东西。

        “实习期还有三个月，还是先踏踏实实学习吧。”

        前身一直想成为御兽师，也做了许多准备，宠兽饲养员这个职业就是他为自己准备的跳板。

        虽然收获了金手指，但是时宇考虑了一下，自己对御兽师的了解实在有限，靠记忆中那点知识根本无法放开浪，当下还是稳妥发育比较好。

        这个技能图鉴毫无疑问是为成为御兽师打造的，不当御兽师可惜了，可除了图鉴的教学能力，他目前就没有什么其他的成为御兽师的资本了。

        接下来，时宇决定还是先好好对待宠兽饲养员这份工作，趁着这个机会更多了解一下技能图鉴和这个世界，再做其他打算。

        而且，他从冰原市平城区铁竹饲养基地预定的宠兽幼崽，也需要他这次的实习证明才能领取呢。

        铁竹饲养基地考虑到时宇的偿还能力，现在他还没资格领取那只宠兽，但等他实习结束后，获得饲养员证书，就有那个贷款资格了。

        因此，对于时宇来说，这个实习还真马虎不得。

        如果时宇的规划全部顺利，成为御兽师应该没问题，不过之后，便是漫长的还贷生涯了，这个过程，成为御兽师有可能让时宇一飞冲天，也有可能把他拖垮……毕竟养宠兽是真的消耗资源。

        食铁兽！

        这就是时宇预定那只宠兽的名字。

        【名称】：食铁兽。

        【属性】：金

        【种族等级】：中等超凡。

        【种族技能】：硬化

        食铁兽……其实就是大熊猫。
            </div>
        </div>
    </aside>
    
    <main style="background-color: #F5F5F5;">
        <div class="header_sticky" style="background-color: #F5F5F5">
        <header class="header_base ">
            <div class="row">
                <div class="col">
                    <i class="bi bi-search " @@click=""></i>
                <input class="ms-1"  type="text"  placeholder="筛选" @@change.prevent='handleInput(event)'>
                </div>
            </div>
            <div>
                <a v-bind:href="['../posts/CreateMD/?categoryId='+vCurrentId]" class="link-underline-light">添加MD</a>
                <a v-bind:href="['../posts/Create/?categoryId='+vCurrentId]" class="link-underline-light">添加</a>
            </div>
        </header>
        </div>
        <div>
            <div class="m-2" id="postbody">
        肯定是因为狼王留下了自己气味的缘故，狼王走后，面对时宇，这群普通雪狼表现的明显没之前那么凶了。

            正如其他实习生说的一样，很乖巧。

            这种乖巧，让时宇接下来喂食过程以及研究脑海中的图鉴过程顺利不少。

            “果然能教学。”给一只只雪狼分配好食物后，时宇心中兴奋。

            刚才，在视线中有一只只雪狼时，时宇脑海中的石质图鉴的第一页信息直接改变了。

            技能状态从暂无教学对象变成了可教学。

            也就是说，他的确可以将图鉴中的威慑技能，传授给刚才喂食过的每一只雪狼！

            真·手动生产狼王！

            当然，能归能，时宇很显然不会贸然使用这个教学能力。

            先不说不知道会消耗多少体能，另外，随意帮助饲养基地的雪狼学会威慑技能，肯定也会出大问题的……

            继续喂食——

            时宇全身心投入进去，很快，工作完成，不过让时宇可惜的是，喂食雪狼的过程中，他没能复制到雪狼们的其他技能。

            毕竟除了时刻展现威慑的狼王，其他雪狼根本不会闲的蛋疼在吃饭时候使用种族技能。

            没有就没有吧，时宇也不贪心，一个高阶精神系威慑技能，已经让他这次赚大了。

            ……

            接下来，忙完了雪狼群的喂食工作后，时宇又开始去做其他任务。

            饲养基地内，时宇看见了从天空掠过巡逻的青背鹰。

            视线与意念锁定下，虽然隔着挺远距离，但脑海图鉴中威慑技能的状态再次从暂无教学对象变成可教学状态。

            瞧瞧，不仅能培养出狼王……还能培养出鸟王！

            时宇真的想试一试。

            不过，理智让他选择了干活。

            实习生是非常苦逼的，最苦最累的任务都是他们的，而且，也还都没什么技术含量。

            这也是没办法的事情，毕竟他们还只是学习阶段。

            让时宇他们去做高难度的任务比如训练宠兽，他们也得有那个能力才行。

            就像刚才那样的狼群，如果没有一只会威慑技能的狼王，管理训练起来就非常不容易。

            把这群雪狼训练好，训练成适合御兽师饲养、契约的宠兽，是其他正式饲养训练员的事情了。

            时宇等实习生，也只能做做比较基础的工作。

            当然，除了比较基础的工作，正式饲养员们定期也会带领时宇他们这样的实习生进行其他工作，可以让实习生学到许多新东西。

            “实习期还有三个月，还是先踏踏实实学习吧。”

            前身一直想成为御兽师，也做了许多准备，宠兽饲养员这个职业就是他为自己准备的跳板。

            虽然收获了金手指，但是时宇考虑了一下，自己对御兽师的了解实在有限，靠记忆中那点知识根本无法放开浪，当下还是稳妥发育比较好。

            这个技能图鉴毫无疑问是为成为御兽师打造的，不当御兽师可惜了，可除了图鉴的教学能力，他目前就没有什么其他的成为御兽师的资本了。

            接下来，时宇决定还是先好好对待宠兽饲养员这份工作，趁着这个机会更多了解一下技能图鉴和这个世界，再做其他打算。

            而且，他从冰原市平城区铁竹饲养基地预定的宠兽幼崽，也需要他这次的实习证明才能领取呢。

            铁竹饲养基地考虑到时宇的偿还能力，现在他还没资格领取那只宠兽，但等他实习结束后，获得饲养员证书，就有那个贷款资格了。

            因此，对于时宇来说，这个实习还真马虎不得。

            如果时宇的规划全部顺利，成为御兽师应该没问题，不过之后，便是漫长的还贷生涯了，这个过程，成为御兽师有可能让时宇一飞冲天，也有可能把他拖垮……毕竟养宠兽是真的消耗资源。

            食铁兽！

            这就是时宇预定那只宠兽的名字。

            【名称】：食铁兽。

            【属性】：金

            【种族等级】：中等超凡。

            【种族技能】：硬化

            食铁兽……其实就是大熊猫。

            时宇也没想到，这个世界的大熊猫竟然进化成为了种族等级为中等超凡的食铁兽。

            对于前身给自己选择的初始宠兽，时宇还算满意。

            国宝的颜值和稀有性大加分！

            如果不出意外，他是不会更换选择了，毕竟定金都交了。

            只不过，前世的国宝沦落到这个地步，也够惨的。

            明明普通的大熊猫和普通的狼pk，大熊猫能一掌把狼拍懵。

            但是，食铁兽却比雪狼低了一个种族等级。

            不过时宇也清楚，这和种族技能有关。

            相比雪狼的冰碎牙、冰裂爪，寒息、雪隐这四个种族技能，食铁兽只有一个种族技能。

            就和食铁兽这个名字一样，这个世界的大熊猫进化后，可以通过进食金属矿物，来将身体硬化，让躯体能像钢铁一样坚硬。

            硬化这个种族技能级别，上限不高，还只能近身战斗，属于低阶，自然比不过受老天眷顾的雪狼。

            低阶种族技能，过硬的身体素质，综合下来，食铁兽的种族等级，是中等，其实也不低了，就是有点可惜。

            好歹地球传说中还是蚩尤的坐骑，这换了世界就完全没牌面了啊……平平无奇、普普通通。

            时宇怀疑，就是因为大熊猫太懒了，不是吃竹子就是睡觉，而且性情温顺，所以才导致它们进化的慢的。

            但凡有点血性……至于混成这个样子吗？！

            不过这样也好，不然时宇也不可能买得起食铁兽。

            这还是因为他的户口在平城区，是本地人有政策优惠才买得起的，否则，想都别想。

            “食铁兽不错啊其实……”

            “食铁兽这个把金属矿物吃掉转化为硬化身躯的技能，攻防兼备，还可以了。”

            如果他没判断错，刚才复制的威慑技能，食铁兽肯定也是能学会的，契合度应该没问题。

            自己有技能图鉴，可以尝试让它掌握。

            代表“王的资质”的威慑技能，可以降低对手战斗意志，强化自身战斗意志！

            硬化技能，可以增强自身防御力与攻击力，攻防兼备！

            这两个技能组合，让时宇想到了奇奇怪怪的东西。

            所以，是不是还差个感知类技能，来增加速度？

            要是自己能复制到类似技能……

            到时候，食铁兽可以直接改名为熊猫王了。

            这个配招，估计没有食铁兽御兽师尝试吧……

            想到这里，时宇觉得似乎值得一试……

            留在宠兽饲养基地，不仅是为了学习，这里的环境好像还挺容易让他收集到稀有技能。

            先多收集一些，日后，当其他御兽师苦恼如何教会自己宠兽各种技能时，他完全可以快速给自己的宠兽组合一套神技！

            第4章：寻找目标

            畅想下未来后，时宇被拉回现实，上午的工作他除了有喂食雪狼群要做，还有很多其他的任务，这些任务足足让他忙活了一上午。

            直到接近中午，他才闲下来，不过下午照样被安排的明明白白。

            午餐与午休过后，下午时宇他们这一栋宿舍楼的实习生任务都是同一个。

            这个工作，他们其实已经做了有一段时间了。

            就是之前工作表上写的，对青绵虫的行为与成长进行观察并记录……

            下午。

            时宇低调的跟着大部队来到了青绵虫遍布的森林中。

            森林枝繁叶茂、难以透光。

            青绵虫是这里栖息的最多的宠兽，冰原市宠兽基地内，雪狼只有50多头，但是青绵虫足有上千条。

            基本可以用五个字形容它们，数量烂大街。

            它们的实力也是弱的可怜，相比成长期可以稳稳觉醒四个种族技能的雪狼，青绵虫只有虫丝一个技能。

            而且，虫丝属于运用到完美地步，强度也只能堪比钢丝的不入流技能。

            御兽师们把超凡生物掌握的能力根据威力与效果分为了不同的等级，由低到高，分别是无等级、低阶技能、中阶技能、高阶技能、超阶技能……

            像青绵虫掌握的虫丝，连低阶技能都算不上，根本没有等级划分。

            所以说，青绵虫的种族等级被划分为了低等超凡都算是可怜它的，毕竟青绵虫连大多普通动物都打不过，也就赢在了一手有成长空间。

            不过，根据培养方式不同，青绵虫的虫丝用途还是挺多的。

            但宠兽饲养基地可不是为了生产虫丝才饲养青绵虫的。

            之所以饲养这么弱小的宠兽，那是因为青绵虫在自然界中，是为数不多可以自然进化一次的宠兽。

            它们在摄取足够的营养后，就可以进化为风晶蝶了，并且可以几率觉醒新的种族技能，风刃，从而战力增加。

            虽然进化后因为寿命原因种族等级仍然被划分为低等超凡，但是风晶蝶作为最容易饲养的虫类宠兽之一，是绝大部分普通御兽师的最优初始过度选择。

            接下来，时宇他们的工作，就是记录观察青绵虫的成长状态，判断它们什么时候才能顺利进化。

            请收藏本站：https://www.biqg.cc。笔趣阁手机版：https://m.biqg.cc
            肯定是因为狼王留下了自己气味的缘故，狼王走后，面对时宇，这群普通雪狼表现的明显没之前那么凶了。

            正如其他实习生说的一样，很乖巧。

            这种乖巧，让时宇接下来喂食过程以及研究脑海中的图鉴过程顺利不少。

            “果然能教学。”给一只只雪狼分配好食物后，时宇心中兴奋。

            刚才，在视线中有一只只雪狼时，时宇脑海中的石质图鉴的第一页信息直接改变了。

            技能状态从暂无教学对象变成了可教学。

            也就是说，他的确可以将图鉴中的威慑技能，传授给刚才喂食过的每一只雪狼！

            真·手动生产狼王！

            当然，能归能，时宇很显然不会贸然使用这个教学能力。

            先不说不知道会消耗多少体能，另外，随意帮助饲养基地的雪狼学会威慑技能，肯定也会出大问题的……

            继续喂食——

            时宇全身心投入进去，很快，工作完成，不过让时宇可惜的是，喂食雪狼的过程中，他没能复制到雪狼们的其他技能。

            毕竟除了时刻展现威慑的狼王，其他雪狼根本不会闲的蛋疼在吃饭时候使用种族技能。

            没有就没有吧，时宇也不贪心，一个高阶精神系威慑技能，已经让他这次赚大了。

            ……

            接下来，忙完了雪狼群的喂食工作后，时宇又开始去做其他任务。

            饲养基地内，时宇看见了从天空掠过巡逻的青背鹰。

            视线与意念锁定下，虽然隔着挺远距离，但脑海图鉴中威慑技能的状态再次从暂无教学对象变成可教学状态。

            瞧瞧，不仅能培养出狼王……还能培养出鸟王！

            时宇真的想试一试。

            不过，理智让他选择了干活。

            实习生是非常苦逼的，最苦最累的任务都是他们的，而且，也还都没什么技术含量。

            这也是没办法的事情，毕竟他们还只是学习阶段。

            让时宇他们去做高难度的任务比如训练宠兽，他们也得有那个能力才行。

            就像刚才那样的狼群，如果没有一只会威慑技能的狼王，管理训练起来就非常不容易。

            把这群雪狼训练好，训练成适合御兽师饲养、契约的宠兽，是其他正式饲养训练员的事情了。

            时宇等实习生，也只能做做比较基础的工作。

            当然，除了比较基础的工作，正式饲养员们定期也会带领时宇他们这样的实习生进行其他工作，可以让实习生学到许多新东西。

            “实习期还有三个月，还是先踏踏实实学习吧。”

            前身一直想成为御兽师，也做了许多准备，宠兽饲养员这个职业就是他为自己准备的跳板。

            虽然收获了金手指，但是时宇考虑了一下，自己对御兽师的了解实在有限，靠记忆中那点知识根本无法放开浪，当下还是稳妥发育比较好。

            这个技能图鉴毫无疑问是为成为御兽师打造的，不当御兽师可惜了，可除了图鉴的教学能力，他目前就没有什么其他的成为御兽师的资本了。

            接下来，时宇决定还是先好好对待宠兽饲养员这份工作，趁着这个机会更多了解一下技能图鉴和这个世界，再做其他打算。

            而且，他从冰原市平城区铁竹饲养基地预定的宠兽幼崽，也需要他这次的实习证明才能领取呢。

            铁竹饲养基地考虑到时宇的偿还能力，现在他还没资格领取那只宠兽，但等他实习结束后，获得饲养员证书，就有那个贷款资格了。

            因此，对于时宇来说，这个实习还真马虎不得。

            如果时宇的规划全部顺利，成为御兽师应该没问题，不过之后，便是漫长的还贷生涯了，这个过程，成为御兽师有可能让时宇一飞冲天，也有可能把他拖垮……毕竟养宠兽是真的消耗资源。

            食铁兽！

            这就是时宇预定那只宠兽的名字。

            【名称】：食铁兽。

            【属性】：金

            【种族等级】：中等超凡。

            【种族技能】：硬化

            食铁兽……其实就是大熊猫。

            时宇也没想到，这个世界的大熊猫竟然进化成为了种族等级为中等超凡的食铁兽。

            对于前身给自己选择的初始宠兽，时宇还算满意。

            国宝的颜值和稀有性大加分！

            如果不出意外，他是不会更换选择了，毕竟定金都交了。

            只不过，前世的国宝沦落到这个地步，也够惨的。

            明明普通的大熊猫和普通的狼pk，大熊猫能一掌把狼拍懵。

            但是，食铁兽却比雪狼低了一个种族等级。

            不过时宇也清楚，这和种族技能有关。

            相比雪狼的冰碎牙、冰裂爪，寒息、雪隐这四个种族技能，食铁兽只有一个种族技能。

            就和食铁兽这个名字一样，这个世界的大熊猫进化后，可以通过进食金属矿物，来将身体硬化，让躯体能像钢铁一样坚硬。

            硬化这个种族技能级别，上限不高，还只能近身战斗，属于低阶，自然比不过受老天眷顾的雪狼。

            低阶种族技能，过硬的身体素质，综合下来，食铁兽的种族等级，是中等，其实也不低了，就是有点可惜。

            好歹地球传说中还是蚩尤的坐骑，这换了世界就完全没牌面了啊……平平无奇、普普通通。

            时宇怀疑，就是因为大熊猫太懒了，不是吃竹子就是睡觉，而且性情温顺，所以才导致它们进化的慢的。

            但凡有点血性……至于混成这个样子吗？！

            不过这样也好，不然时宇也不可能买得起食铁兽。

            这还是因为他的户口在平城区，是本地人有政策优惠才买得起的，否则，想都别想。

            “食铁兽不错啊其实……”

            “食铁兽这个把金属矿物吃掉转化为硬化身躯的技能，攻防兼备，还可以了。”

            如果他没判断错，刚才复制的威慑技能，食铁兽肯定也是能学会的，契合度应该没问题。

            自己有技能图鉴，可以尝试让它掌握。

            代表“王的资质”的威慑技能，可以降低对手战斗意志，强化自身战斗意志！

            硬化技能，可以增强自身防御力与攻击力，攻防兼备！

            这两个技能组合，让时宇想到了奇奇怪怪的东西。

            所以，是不是还差个感知类技能，来增加速度？

            要是自己能复制到类似技能……

            到时候，食铁兽可以直接改名为熊猫王了。

            这个配招，估计没有食铁兽御兽师尝试吧……

            想到这里，时宇觉得似乎值得一试……

            留在宠兽饲养基地，不仅是为了学习，这里的环境好像还挺容易让他收集到稀有技能。

            先多收集一些，日后，当其他御兽师苦恼如何教会自己宠兽各种技能时，他完全可以快速给自己的宠兽组合一套神技！

            第4章：寻找目标

            畅想下未来后，时宇被拉回现实，上午的工作他除了有喂食雪狼群要做，还有很多其他的任务，这些任务足足让他忙活了一上午。

            直到接近中午，他才闲下来，不过下午照样被安排的明明白白。

            午餐与午休过后，下午时宇他们这一栋宿舍楼的实习生任务都是同一个。

            这个工作，他们其实已经做了有一段时间了。

            就是之前工作表上写的，对青绵虫的行为与成长进行观察并记录……

            下午。

            时宇低调的跟着大部队来到了青绵虫遍布的森林中。

            森林枝繁叶茂、难以透光。

            青绵虫是这里栖息的最多的宠兽，冰原市宠兽基地内，雪狼只有50多头，但是青绵虫足有上千条。

            基本可以用五个字形容它们，数量烂大街。

            它们的实力也是弱的可怜，相比成长期可以稳稳觉醒四个种族技能的雪狼，青绵虫只有虫丝一个技能。

            而且，虫丝属于运用到完美地步，强度也只能堪比钢丝的不入流技能。

            御兽师们把超凡生物掌握的能力根据威力与效果分为了不同的等级，由低到高，分别是无等级、低阶技能、中阶技能、高阶技能、超阶技能……

            像青绵虫掌握的虫丝，连低阶技能都算不上，根本没有等级划分。

            所以说，青绵虫的种族等级被划分为了低等超凡都算是可怜它的，毕竟青绵虫连大多普通动物都打不过，也就赢在了一手有成长空间。

            不过，根据培养方式不同，青绵虫的虫丝用途还是挺多的。

            但宠兽饲养基地可不是为了生产虫丝才饲养青绵虫的。

            之所以饲养这么弱小的宠兽，那是因为青绵虫在自然界中，是为数不多可以自然进化一次的宠兽。

            它们在摄取足够的营养后，就可以进化为风晶蝶了，并且可以几率觉醒新的种族技能，风刃，从而战力增加。

            虽然进化后因为寿命原因种族等级仍然被划分为低等超凡，但是风晶蝶作为最容易饲养的虫类宠兽之一，是绝大部分普通御兽师的最优初始过度选择。

            接下来，时宇他们的工作，就是记录观察青绵虫的成长状态，判断它们什么时候才能顺利进化。

            请收藏本站：https://www.biqg.cc。笔趣阁手机版：https://m.biqg.cc
            </div>
            <div>
                <nav class="mt-5 ms-2" aria-label="Page navigation example">
                    <ul :class="('pagination '+ HidePageList)">
                        <li :class="('page-item '+prevDisabled)">
                            <a href="#" class="page-link" @@click.prevent="loadPost(categoryId,1,pageSize)">首页</a>
                        </li>
                        <li :class="('page-item '+prevDisabled)">
                            <a href="#" class="page-link" @@click.prevent="loadPost(categoryId,pageIndex-1,pageSize)">上一页</a>
                        </li>

                        <li :class="('page-item '+ hightPageStyle(InitIndex + n))" v-for="n in pageNum">
                            <a href="#" class="page-link"
                               @@click.prevent="loadPost(categoryId,InitIndex+n,pageSize)">{{InitIndex+n}}</a>
                        </li>

                        <li :class="('page-item '+nextDisabled)">
                            <a href="#" class="page-link"
                               @@click.prevent="loadPost(categoryId,pageIndex+1,pageSize)">下一页</a>
                        </li>

                        <li :class="('page-item '+nextDisabled)">
                            <a href="#" class="page-link"
                               @@click.prevent="loadPost(categoryId,totalPages,pageSize)">尾页</a>
                        </li>

                        <li class="page-item">{{pageIndex}}/{{totalPages}}</li>

                    </ul>
                </nav>

                <footer class="border-top footer text-muted  ms-2 me-2">
                    <div class="container  mb-4">
                        &copy; 2024 - 山水酒月 - <a asp-area="" asp-controller="Home" asp-action="About">关于</a>
                    </div>
                </footer>
            </div>
    </main>
</div>

<script>


    let id = 1000;
    const app = new Vue({
        el: '#app',
        data() {
            return {
                scrollTop: 0,
                isDraggable: true,
                newLabel: "",
                findFiled: "",
                treebutShow: false,
                categoryTree: [],
                vCurrentId: -1,
                vCurrentNode: null,
                vNode: null,
                defaultProps: {
                    children: 'children',
                    label: 'label'
                },
                defaultExpandIds: [],
                prevDisabled: "",
                nextDisabled: "",
                HidePageList: "",
                HightPageNum: "",
                pageNum: 0,
                InitIndex: 0,
                pageIndex: 0,
                totalPages: 0,
                pageSize: 3,
                categoryId: 0,
            };
        },

        mounted() {
            window.addEventListener('scroll', this.scroll, true);

            this.$nextTick(() => {
                this.loadAllCategory();

                setTimeout(() => { this.loaddbScroll(); }, 300);

                // const scrollableDiv = this.$refs.divScroll;
                // if (scrollableDiv.scrollHeight > scrollableDiv.clientHeight) {
                //     console.log('该元素有滚动条');
                // } else {
                //     console.log('该元素没有滚动条');
                // }
            });


        },
        methods: {
            // 树节点展开
            handleNodeExpand(data) {
                // 保存当前展开的节点
                let flag = false
                this.defaultExpandIds.some(item => {
                    if (item === data.id) { // 判断当前节点是否存在， 存在不做处理
                        flag = true
                        return true
                    }
                })
                if (!flag) { // 不存在则存到数组里
                    this.defaultExpandIds.push(data.id)
                }
            },
            // 树节点关闭
            handleNodeCollapse(data) {
                this.defaultExpandIds.some((item, i) => {
                    if (item === data.id) {
                        // 删除关闭节点
                        this.defaultExpandIds.length = i
                    }
                })
            },
            scroll: function (event) {
                if (event.target.scrollTop == null) return;
                this.scrollTop = event.target.scrollTop;
            },
            hightPageStyle: function (a) {
                // if (a === this.pageIndex) {
                //     return "active";
                // } else {
                //     return "";
                // }
                return a === this.pageIndex ? "active" : "";
            },
            setDraggable(draggable) {
                this.isDraggable = draggable;
            },
            createPost: function () {
                axios.get("../posts/Create?categoryId=" + this.vCurrentId).then(
                    (response) => {

                    },
                    (response) => {
                        //失败
                        console.log("createPost error");
                    });
            },
            loadAllCategory: function () {
                let _this = this;
                axios.get("../Categories/GetAllCategory").then(
                    (response) => {
                        //成功
                        if (response.data != null && response.data.entity != null && response.data.entity.categories != null) {
                            //有数据
                            _this.categoryTree = response.data.entity.categories;
                            _this.defaultExpandIds = response.data.entity.categoryStates;
                            //post有数据
                            _this.tableData = response.data.entity.posts.postList;
                            _this.total = response.data.entity.posts.total;
                            // _this.pageSize = response.data.entity.posts.pageSize;
                            // _this.currentPage = response.data.entity.currentPage;
                            // _this.myCurrentId = response.data.entity.currentCategory;

                        }
                    },
                    (response) => {
                        //失败
                        console.log("error");
                    },
                ).then(() => {
                    this.$nextTick(() => {
                        this.loadDb();

                    });

                });
            },

            handleNodeClick(data, node, item) {
                console.log(data);
                // alert(data.label);

                this.vCurrentNode = data;
                this.vCurrentId = data == null ? 0 : data.id;
                this.vNode = node;
                ////获取文章列表
                if (data != this.myCurrentNode) {
                    let _this = this;
                    const newChild = { CategoryId: data.id, PageSize: this.pageSize };
                    this.getpost(newChild);
                }
            },
            getpost(newChild) {
                axios.post("../Categories/IndexList/", newChild).then(
                    (response) => {
                        //成功
                        if (response.data != null) {
                            //有数据
                            // this.tableData = response.data.Entity.postList;
                            // this.total = response.data.Entity.total;
                            // this.pageSize = response.data.Entity.pageSize;
                            // this.currentPage = 1;
                            document.getElementById("postbody").innerHTML = response.data;
                            // console.log("handleNodeClick：CategoryId=" + @ViewData["CategoryId"]+" PageIndex=" + @ViewData["PageIndex"]);
                            this.getPostParm();
                        }
                    },
                    (response) => {
                        //失败
                        // alert(response.data);
                        console.log("handleNodeClick：获取文章失败");
                    });

            },
            getPostParm() {
                axios.post("../Categories/IndexListParm/").then(
                    (response) => {
                        //成功
                        if (response.data != null) {
                            //有数据
                            // this.tableData = response.data.Entity.postList;
                            // this.total = response.data.Entity.total;
                            // this.pageSize = response.data.Entity.pageSize;
                            // this.currentPage = 1;
                            // document.getElementById("postbody").innerHTML = response.data;
                            // console.log("handleNodeClick：CategoryId=" + @ViewData["CategoryId"]+" PageIndex=" + @ViewData["PageIndex"]);
                            var result1 = response.data.entity;
                            console.log("post参数： ", result1);
                            this.prevDisabled = !result1.paginatedListParm.hasPreviousPage ? "disabled" : "";
                            this.nextDisabled = !result1.paginatedListParm.hasNextPage ? "disabled" : "";
                            this.HidePageList = result1.paginatedListParm.totalPages <= 1 ? "d-none" : "";
                            this.pageIndex = result1.postParm.pageIndex;
                            this.totalPages = result1.paginatedListParm.totalPages;
                            this.pageSize = result1.postParm.pageSize;
                            this.categoryId = result1.postParm.categoryId;
                            this.pageNum = (result1.paginatedListParm.totalPages < result1.paginatedListParm.showIndexCount) ?
                                result1.paginatedListParm.totalPages :
                                result1.paginatedListParm.showIndexCount;
                            if (result1.paginatedListParm.totalPages > result1.paginatedListParm.showIndexCount) {
                                var cenentVal = Math.round(result1.paginatedListParm.showIndexCount / 2) + 1;
                                var offsetIndex = result1.postParm.pageIndex - cenentVal;
                                this.InitIndex = offsetIndex <= 0 ? 0 : offsetIndex;
                                if ((result1.postParm.pageIndex + (result1.paginatedListParm.showIndexCount - cenentVal)) > result1.paginatedListParm.totalPages) {
                                    this.InitIndex = result1.paginatedListParm.totalPages - this.pageNum;
                                }
                            }
                        }
                    },
                    (response) => {
                        //失败
                        // alert(response.data);
                        console.log("getPostParm：获取文章参数失败");
                    });
            },
            showSocrllX(hide) {
                if (hide == true) {
                    document.getElementById("treebox").scrollLeft = 0;
                    document.getElementById("treebox").style.overflowX = 'hidden';
                } else {
                    document.getElementById("treebox").style.overflowX = 'auto';
                }
            },

            showTreeButBar() {
                var userinfo = JSON.parse(sessionStorage.getItem('indexTree'))
                console.log("userinfo:", userinfo)
                this.treebutShow = !this.treebutShow;
                if (this.treebutShow == true) {
                    this.showSocrllX(true);
                } else {
                    this.showSocrllX(false);
                }
            },

            edit(node, data) {
                // data.label = "修改了" + data.label;
                console.log(
                    "before:",
                    data.id,
                    data.label,
                    data.isEdit
                );
                this.treebutShow = false;
                this.$set(data, "isEdit", 1);
                this.isDraggable = false;
                this.newLabel = data.label;
                this.$nextTick(() => {
                    this.$refs.input.focus();
                });
                console.log("after:", data.id, data.label, data.isEdit);

            },
            submitEdit(node, data) {
                // console.log('点击了保存按钮')
                if (data.label == this.newLabel) {
                    console.log("没有修改");
                    this.newLabel = "";
                    this.$set(data, "isEdit", 0);
                } else {


                    //后台更新
                    //保存到数据库

                    const newChild1 = { Name: this.newLabel, Id: data.id };
                    let _this = this;
                    axios.post("../Categories/EditName", newChild1).then(
                        (response) => {
                            if (response.data != null && response.data.code == 0) {
                                //有数据
                                console.log(response.data);
                                this.$set(data, "label", this.newLabel);
                                this.newLabel = "";
                                this.$set(data, "isEdit", 0);
                            }
                        },
                        (response) => {
                            //失败
                            console.log("category添加append失败。");
                        },
                    );
                }
                this.treebutShow = true;
                this.isDraggable = true;
            },

            submitFind() {
                console.log("测试：" + this.findFiled);
            },
            append(node, data) {
                const newChild = { PId: data.id };
                //保存到数据库
                axios.post("../Categories/Append/", newChild).then(
                    (response) => {
                        if (response.data != null && response.data.code == 0 && response.data.entity != null && response.data.entity.category != null) {
                            //有数据
                            console.log(response.data);
                            data.children.push(response.data.entity.category);
                        }
                    },
                    (response) => {
                        //失败
                        console.log("category添加append失败。");
                    },
                );
            },
            appendClass(node, data) {
                var i = 0;
                var level = node.level;
                if (level == 1) {
                    console.log("parent.PID=" + 0);

                } else {
                    console.log("parent.PID=" + data.parentID);

                    i = data.parentID;
                }
                const newChild = { PId: i };

                axios.post("../Categories/Append/", newChild).then(
                    (response) => {
                        if (response.data != null && response.data.code == 0 && response.data.entity.category != null) {
                            //更新视图中的项
                            if (level == 1) {
                                node.parent.data.push(response.data.entity.category);
                            } else {
                                node.parent.data.children.push(response.data.entity.category);
                            }
                            return;
                        }
                    },
                    (response) => {
                        //失败
                        console.log("category添加append失败。");
                    },
                );


                this.updateApiGroup(this.data);
            },
            insertBefore(node, data) {
                //之前

                // if (Node.level == 1) {
                //     var i = Node.parent.data.findIndex(x => x.id == data.id);
                //     if (i < 0) return;
                //     Node.parent.data.splice(i , 0, newChild);
                // } else {

                //     var i = Node.parent.data.children.findIndex(x => x.id == data.id);
                //     if (i < 0) return;
                //     Node.parent.data.children.splice(i , 0, newChild);
                // }
                // this.updateApiGroup(this.data);

                const parent = node.parent;
                const children = parent.data.children || parent.data;
                const index = children.findIndex(d => d.id === data.id);

                var preNodeId = index > 0 ? children[index - 1].id : -1;
                var nextNodeId = data.id;
                console.log("insertBefore:" + preNodeId + " _ " + nextNodeId);
                //更新数据库
                const newChild = { preId: preNodeId, nextId: nextNodeId };
                axios.post("../Categories/Insert/", newChild).then(
                    (response) => {
                        if (response.data != null && response.data.code == 0 && response.data.entity.category != null) {
                            //删除视图中的项
                            if (index >= 0) children.splice(index, 0, response.data.entity.category);
                            return;
                        }
                    },
                    (response) => {
                        //失败
                        console.log("category添加append失败。");
                    },
                );

            },
            insertAfter(node, data) {

                // const newChild = { id: id++, isEdit: 0, label: '新建分类' + (id++), children: [] };
                // if (Node.level == 1) {
                //     var i = Node.parent.data.findIndex(x => x.id == data.id);
                //     if (i < 0) return;
                //     Node.parent.data.splice(i + 1, 0, newChild);
                // }else{
                //     var i = Node.parent.data.children.findIndex(x => x.id == data.id);
                //     if (i < 0) return;
                //     Node.parent.data.children.splice(i + 1, 0, newChild);
                // }

                // this.updateApiGroup(this.data);
                const parent = node.parent;
                const children = parent.data.children || parent.data;
                const index = children.findIndex(d => d.id === data.id);
                //获取前后记录的id
                var preNodeId = data.id;
                var nextNodeId = ((index + 1) >= 0 && (index + 1) < children.length) ? children[index + 1].id : -1;
                console.log("insertAfter:" + preNodeId + " _ " + nextNodeId);

                //更新数据库
                const newChild = { preId: preNodeId, nextId: nextNodeId };
                axios.post("../Categories/Insert/", newChild).then(
                    (response) => {
                        if (response.data != null && response.data.code == 0 && response.data.entity.category != null) {
                            //添加新记录
                            if (index >= 0) children.splice(index + 1, 0, response.data.entity.category);
                            return;
                        }
                    },
                    (response) => {
                        //失败
                        console.log("category添加append失败。");
                    },
                );
            },

            move(node, data) { },
            remove(node, data) {
                //var ulrstr=
                axios.post("../Categories/Delete/" + data.id).then(
                    (response) => {
                        if (response.data != null && response.data.code == 0) {
                            //删除视图中的项
                            const parent = node.parent;
                            const children = parent.data.children || parent.data;
                            const index = children.findIndex(d => d.id === data.id);
                            children.splice(index, 1);
                            return;
                        }
                    },
                    (response) => {
                        //失败
                        console.log("category添加append失败。");
                    },
                );

            },

            handleDragStart(node, ev) {
                console.log('drag start', node.data.label);
            },
            handleDragEnter(draggingNode, dropNode, ev) {
                console.log('tree drag enter: ', dropNode.label);
            },
            handleDragLeave(draggingNode, dropNode, ev) {
                console.log('tree drag leave: ', dropNode.label);
            },
            handleDragOver(draggingNode, dropNode, ev) {
                console.log('tree drag over: ', dropNode.label);
            },
            handleDragEnd(draggingNode, dropNode, dropType, ev) {
                console.log('tree drag end: ', dropNode && dropNode.label, dropType);
                if (dropNode.data.id == 0 && dropType == "before") {
                    this.tree.dragState.dropNode = null;
                    this.tree.dragState.draggingNode = null;
                    this.tree.$el.querySelectorAll('.is-drop-inner').forEach(d => {
                        d.classList.remove('is-drop-inner');
                    });
                    return;
                }

                // 调后端更新
                this.updateApiGroup(this.data);
            },
            handleDrop(draggingNode, dropNode, dropType, ev) {
                console.log('tree drop: ', dropNode.label, dropType);

                if (dropType == "inner") {
                    let updateData = draggingNode.data;
                    let parent = dropNode.data;

                    console.log("category.handleDrop.inner=pid:" + parent.id + " _ updateData.id:" + updateData.id);


                    const newChild = { PId: parent.id, UPdataId: updateData.id };
                    //保存到数据库
                    axios.post("../Categories/Append/", newChild).then(
                        (response) => {
                            if (response.data != null && response.data.code == 0 && response.data.entity != null && response.data.entity.category != null) {
                                //有数据
                                console.log(response.data);
                                // data.children.push(response.data.entity.category);
                            }
                        },
                        (response) => {
                            //失败
                            console.log("category添加append失败。");
                        },
                    );
                } else if (dropType == "before") {
                    //以前
                    // var children = dropType != "inner" ? dropNode.parent.data : dropNode.data;
                    let updateData = draggingNode.data;

                    const parent = dropNode.parent;
                    const children = parent.data.children || parent.data;
                    const index = children.findIndex(d => d.id === updateData.id);

                    var preNodeId = index > 0 ? children[index - 1].id : -1;
                    var nextNodeId = dropNode.data.id;
                    var insertNodeId = updateData.id;
                    console.log("category.handleDrop.Before=" + preNodeId + " _ " + insertNodeId + " _ " + nextNodeId);
                    //更新数据库
                    const newChild = { preId: preNodeId, nextId: nextNodeId, InsertId: insertNodeId };
                    axios.post("../Categories/Insert/", newChild).then(
                        (response) => {
                            if (response.data != null && response.data.code == 0 && response.data.entity.category != null) {
                                //删除视图中的项
                                // if (index >= 0) children.splice(index, 0, response.data.entity.category);
                                return;
                            }
                        },
                        (response) => {
                            //失败
                            console.log("category添加append失败。");
                        },
                    );

                } else if (dropType == "after") {
                    //以前
                    // var children = dropType != "inner" ? dropNode.parent.data : dropNode.data;
                    let updateData = draggingNode.data;

                    const parent = dropNode.parent;
                    const children = parent.data.children || parent.data;
                    const index = children.findIndex(d => d.id === updateData.id);

                    var preNodeId = dropNode.data.id;
                    var insertNodeId = updateData.id;
                    var nextNodeId = ((index + 1) >= 0 && (index + 1) < children.length) ? children[index + 1].id : -1;

                    console.log("category.handleDrop.after=" + preNodeId + " _ " + insertNodeId + " _ " + nextNodeId);
                    //更新数据库
                    const newChild = { preId: preNodeId, nextId: nextNodeId, InsertId: insertNodeId };
                    axios.post("../Categories/Insert/", newChild).then(
                        (response) => {
                            if (response.data != null && response.data.code == 0 && response.data.entity.category != null) {
                                //删除视图中的项
                                // if (index >= 0) children.splice(index, 0, response.data.entity.category);
                                return;
                            }
                        },
                        (response) => {
                            //失败
                            console.log("category添加append失败。");
                        },
                    );

                }
            },
            allowDrop(draggingNode, dropNode, type) {
                console.log('tree allowDrop: ', draggingNode.data.id, dropNode.data.id, type);
                if (dropNode.data.id === -1 && type != "next")
                    return false;
                return true;
            },
            allowDrag(draggingNode) {
                // 顶层默认分组不允许拖拽
                if (draggingNode.data.id === -1) {
                    return false;
                } else {
                    return true;
                }
            },

            ellipsis(value, len) {
                if (!value) return ''
                if (value.length > len) {
                    var i = value.slice(0, len) + '...';
                    console.log('ellipsis Label:{0} ', i);
                    return i;
                }
                return value
            },
            //更新数据
            updateApiGroup(data) {
                console.log(data, '数据');
                // updateApiGroup(1, data)
                //   .then(response => {
                //     console.log(response)
                //   })
                //   .catch(err => {
                //     console.log(err)
                //   })
            },
            //回车失去焦点
            enterBlur(event) {
                event.target.blur();
            },
            loadPost(categoryId, pageindex, pagesize) {
                console.log("loadPost：参数: categoryId=" + categoryId + " pageindex=" + pageindex + " pagesize=" + pagesize);
                let _this = this;
                const newChild = { CategoryId: categoryId, PageIndex: pageindex, PageSize: pagesize };

                this.getpost(newChild);
            },
            handleInput(event) {
                const inputValue = event.target.value;
                // const nonChineseRegex = /[^a-zA-Z0-9]/g; // 非中文字符的正则表达式
                // const filteredValue = inputValue.replace(nonChineseRegex, ''); // 过滤掉非中文字符
                // event.target.value = filteredValue; // 将输入框的值设置为过滤后的值
                // if (inputValue == "") return;
                console.log("handleInput.inputValue= " + inputValue);
                //const newChild = { FindStr: inputValue };
                //this.axiosLoadPost(newChild);
                this.loadPostByFindstr(inputValue);
            },
            loadPostByFindstr(findstr) {
                console.log("loadPostByFindstr：参数: FindStr=" + findstr);
                const newChild = { FindStr: findstr };
                this.getpost(newChild);
            },

            bakDb() {
                sessionStorage.setItem("indexTreeScrollTop", JSON.stringify(this.scrollTop))
                var scrollTop1 = JSON.parse(sessionStorage.getItem('indexTreeScrollTop'))
                sessionStorage.setItem("indexTree", JSON.stringify(this.vCurrentId))
                sessionStorage.setItem("indexTreeExpandIds", JSON.stringify(this.defaultExpandIds))
                console.log(this.scrollTop, scrollTop1, this.vCurrentId);
            },
            loadDb() {
                console.log(this.vCurrentId);
                sessionStorage.setItem("AppName", JSON.stringify("@Html.Raw(ViewData["AppName"])"))
                var userinfo = JSON.parse(sessionStorage.getItem('indexTree'))
                if (userinfo != null) {
                    this.$refs.tree.setCurrentKey(userinfo) // 选中指定节点
                    this.vCurrentNode = this.$refs.tree.getCurrentNode();
                    if (this.vCurrentNode != null) this.handleNodeClick(this.vCurrentNode);
                } else {
                    this.$refs.tree.setCurrentKey(this.vCurrentId) // 默认选中节点第一个
                    this.vCurrentNode = this.$refs.tree.getCurrentNode();
                    var node = this.$refs.tree.$el.querySelector('.el-tree-node');
                    node.click();
                }

                var ExpandIds = JSON.parse(sessionStorage.getItem('indexTreeExpandIds'))
                if (ExpandIds != null) {
                    this.defaultExpandIds = ExpandIds;
                }


            },
            loaddbScroll() {
                var scrollTop = JSON.parse(sessionStorage.getItem('indexTreeScrollTop'))
                if (scrollTop != null) this.$refs.divScroll.scrollTop = scrollTop;
            }
        },



    });


    function getCateoryID() {
        return app.vCurrentId;
    }



    // function axiosLoadPost(data) {
    //     $.ajax({
    //         type: "post",
    //         url: "../Categories/IndexList/",
    //         async: false,
    //         contentType: 'application/json;charset=UTF-8',
    //         data: JSON.stringify(data),
    //         success: function (result) {
    //             // document.getElementById("postbody").innerHTML = result;
    //             $('#postbody').html(result);
    //         },
    //         error: function (e) {
    //             alert('API调用出错!');
    //             console.log("API调用出错!: ", e);
    //         }
    //     });


    window.onbeforeunload = function (event) {
        app.bakDb();
        //return confirm("确定离开此页面吗？" );
    }
</script>